데이터 베이스가 파일 처리방식보다 좋은 점
데이터의 중복성-수정 문제를 해결 가능
프로그램의 데이터 의존성

자기기술성
본인한테 저장되어있는 데이터베이스가 어떤것인가를 표현하는 것
데이터베이스에 대한 데이터를 통하여 데이터의 구조를 직접알고있지않아도 데이터를 액세스 할 수 있다.
데이터가 바뀌면 프로그램이 바뀌어야 하는데
이를 프로그램의 데이터 의존성이라고 한다.
프로그램이 메타데이터에 접근해서 데이터가 어떤 방식으로 저장되어 있는지 파악하고 데이터를 액세스해서 메타데이터에서 읽은 대로 파일을 읽어온다.

프로그램과 데이터를 분리시킬 수 있다.
데이터를 추상화 할 수 있다.
사용자가 원하는 상태로 데이터를 저장할 수 있다.
여러 사용자가 동시에 데이터에 액세스 가능하다.

프로그램을 바꾸지 않고 사용자가 원하던 업데이트를 실행시켜준다면 더 좋아 할것이다.
저장구조와 데이터의 의미를 분리 시킨다.
사용자는 데이터의 의미를 바라본다.

각사용자들 마다 필요한 데이터만 보여준다 - 실제데이터가 자유를 갖게 된다.

데이터베이스의 스키마와 상태
상태  - 특정시점의 데이터 베이스 내용을 의미 
	시간이 지남에 따라 계속해서 내용이 바뀜(숫자와 언어로 수치를 나타내는 느낌)
스키마 - 전체적인 데이터베이스 구조를 뜻함
	자주 변경되지 않음(데이터의 항목과 같은 역할을 하는건가)
프로그램을 개발했는데 새로운 기능을 추가할 때 스키마는 자주 변하지 않는 반면 상태는 업데이트가 발생할 때마다 변경된다.

	데이터베이스 관리 시스템의 사용효과
데이터를 표준화해서 관리 할 수 있다. -업무효율성증대
데이터구조 변경에 융동성 부여 - 데이터베이스 내의 자료 구조가 변경되어도 사용자에 대한 영향은 거의 없음
응용프로그램의 개발 시간이 단축된다. - DBMS가 동시성 제어, 질의어, 데이터 모델링기능을 제공해줘서 프로그래머가 부담이 줄게 된다.
항상 최신의 정보 제공 - 동시에 데이터를 업데이트 해줘서 어느 한쪽이 데이터를 늦게 받는 경우가 없다.
규모의 경제성 - 부서마다 다른 방식으로 자료를 관리 하는 것보다 통합 DB로 관리하는 것이 전체적인 관점에서 적은 비용이다.

DBMS의 단점
비용의 증가 - 소프트웨어 가격이 비쌈
성능 감소 - 동시성 제어, 파손*회복, 보안| 한사람만 액세스 하는 프로그램이라면 굳이 사용할 필요가 없다.
고장의 영향 확대 - 한곳에 모아두고 사용하다 보니 한번에 망가진다면 손상을 피해갈 수 없다.

	계층 모델과 네트워크 모델
데이터들 이 계층적으로 이루어져 있다는 생각으로 만듦
EX)조직관리에 대한 데이터베이스를 만든다.
	관계형 데이터 모델
매우 간단하면서도 표현력이 높다.
	객체지향 모델
c++이 들어오면서 시장을 흔들었으나 바뀌지는 않았다.
성능이 별로였나보다.
	XML을 이용한 데이터 교환
인터넷을 이용해서 데이터를 교환
	최근 DB기능 확장
이미지, 오디오, 비디오, 시간, 공간 데이터 관리
머신러닝이랑 인공지능과도 연관지어서 한다고 함




