tree: directed grah

Adjacency(인접) Matrix : 그래프를 표에 나타내는 행렬. 간접적으로 연결이 되어있어도 직접연결된것이 아니면 연결되어있다고 표현하지 않는다. weighted Graph를 사용하면 연결되고 연결되지 않고만 보는게 아니라 edge의 값을 적어준다.

Adjacency List : 각배열방과 인접한 노드들을 나열해 놓은 리스트. 최대 노드개수의 2배까지 만들어진다.

 

weighted Graph : edge들에 값이  있어서 사이클이  있는지 없는지 확인할 수 있다.

DAG(Directed Acyclic Graph) : edge들은 방향을 나타내고 있고 사이클을 만들지 않는다.

 

합집합 찾기

각자 자기자신만을 가리키도록 되어있을 때

더 작은 숫자를 부모로 가지도록 해준다.

내가 찾은 노드의 부모가 뭔지 알아내는 방법이 부모인 노드에가서 부모노드를 쓰고 하는 방식으로 최종 root에 도달한다.

두 노드가 이미 같은 집합에 속해 있는 경우 간선을 추가하면 사이클이 발생한다.

하지만 두 노드가 다른 집합에 속해 있을 때 간선을 추가해도 사이클이 발생하지 않는다.

 

Kruskal 알고리즘

최소비용으로 노드를 연결해서 모든 노드가 연결되도록 하기 위한 알고리즘

도시에 있는 도로를 연결할 때 가장 적은 비용으로 연결하는 방법을 찾는 알고리즘

간선 개수 = 노드 - 1

사이클이 형성되지 않게 최소비용 간선부터 추가를 해본다.

 

Prim알고리즘

현재 신장트리 T의 노드들과 연결된 '모든' 간선들 중에서 가장 가중치가 작으면서 순환을 발생시키지 않는 간선을 선택해서 새로운 신장트리에 추가한다.

 - 최소 가중치 간선을 선택

 - 선택한 간선의 노드를 추가할 때 순환이 생기는가 확인

 - 추가, 혹은 재탐색

 

시작점을 기준으로 간선이 확장해 나가는 방식의 알고리즘

그래프의 모든 정점에 대해 key값을 inf로 할당하고, 부모를 NIL(아무것도 없음)로  할당합니다.

시작 정점의 key값을 0으로 하고, 그래프의 모든 점을 최소 우선순위 큐에 삽입한다.

최소 우선순위 큐가 비어있을 때까지 반복문을 수행하며, 매 반복문마다 key값이 최소인 정점을 추출합니다.

추출한 정점은 모든 인접한 정점에 대해, 가중치와 정점의 key값 비교해서 key값이 더 크면 key값을 가중치 값으로 변경하고, 부모를 추출된 정점에 할당한다.

 

신장트리

모든 정점이 간선으로 연결되어 있으면서 사이클이 없는 그래프

MST

신장트리 중에서 가중치의 합이 최소가 되는것을 최소신장 트리라고 한다.

프림 알고리즘

노드를 중심으로 간선을 탐색하는 알고리즘

 

1. 임의의 점을 선택해서 우선순위 큐에 넣는다.

2. 우선순위 큐에서 정점을 하나 꺼낸다.

3. 우선순위 큐에서 꺼낸 정점이 이미 방문한 정점이라면, 다시 우선순위 큐에서 새로운 정점을 꺼낸다.

4. 우선순위 큐에서 꺼낸 정점이 아직 방문하지 않은 정점이라면, 방문처리를 하고 정점의 비용을 더한다.

5. 위의 정점과 연결된 다른정점들중 방문하지 않은 정점들의 정보를 우선순위 큐에 넣음

6. 우선순위 큐가 비어있을 때까지 2~5번 과정을 반복

이라고 적혀있는데 이 방법은 사이클을 고려하지 않는건가?