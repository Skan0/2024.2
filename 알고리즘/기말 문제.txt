기말 문제
허프만 코드트리를 보고 코드가 어떻게 해석되는지 알 수 있어야한다.
DP와 Dijkstra의 차이점을 알아야한다.
배낭문제가 나올건데 K[i,w]는 물건 1~i까지만 고려하고 배낭의 용량이 w일때의 최대 가치다.
부분 집합 합 문제의 과정이 나올건데 다음에 나올 상황을 설명가능해야한다.
통 채우기 문제 다음순서에 물건이 어디로 들어가는지 알아야한다.
MST의 시간복잡도가 왜 mlogn이 되는지 알아야한다. -> 가중치의 최솟값을 찾을 때 힙을 사용하기 때문
Prim알고리즘의 과정을 알아야한다.
연속행렬곱셈 - 행렬의 곱셈 순서가 어디에서 먼저 일어날지 순서를 알아야한다.


허프만 코드
코드 압축방식의 하나로 자주쓰는 변수에게 짧은 코드를 주고 자주 쓰지 않는 코드에 긴코드를 준다.
접두부특성을 지켜야하는데 접두부 특성은 앞에 있는 코드가 다른 코드와 중복되어서는 안된다는것이다.
ex) 101, 1011은 같이 존재할 수 없다.

크러스칼
UnionFind자료구조를 사용해서 두 노드가 같은 집합에 속하는지 확인하고 있다면 다른간선을 선택한다.

Prim
트리노드에 포함된 노드와 연결된 경우 해당간선을 제외하고 다른 간선을 찾는다.

DP(dynamic programming)
문제를 작은 하위 단계로 나누고 각 하위 문제의 해답을 저장하여 중복 계산을 피해서 효율적으로 계산한다.

Dijkstra
우선순위 큐를 사용해서 현재까지 발겨난 최단 경로를ㄹ 기준으로 정점을 선택하고 선택되느 정점을 통해 다른 정점으로 가는 길을 업데이트
힙이 우선순위 큐의 부분집합이래 -> 가장작은 가중치를 찾는데 사용해서 찾는데 log n의 시간이 걸린다.

p
다항식 시간으로 해결가능한 문제

np(Nondeterministic Polynomial)
주어진 해답을 다항식 시간 내에 검증 할 수 있는 결정 문제의 집합
해결은 불가능

np complete
np complete의 모든 문제를 다항식시간내에 환원할 수 있다.
주어진 해답이 맞는지 확인하는데 다항식시간이 걸린다.
np와 np-hard의 교집합

최초적합 (First Fit):
정의: 메모리에서 첫 번째로 충분한 크기의 빈 블록을 찾아 할당합니다.
장점: 빠른 할당 속도.
단점: 메모리 단편화가 발생할 수 있습니다.

다음적합 (Next Fit):
정의: 이전 할당 위치에서부터 시작하여 충분한 크기의 빈 블록을 찾아 할당합니다.
장점: 메모리 단편화를 줄일 수 있습니다.
단점: 여전히 단편화가 발생할 수 있습니다.

최선적합 (Best Fit):
정의: 메모리에서 가장 작은 충분한 크기의 빈 블록을 찾아 할당합니다.
장점: 메모리 사용 효율이 높습니다.
단점: 검색 시간이 오래 걸릴 수 있으며, 작은 빈 블록들이 많이 남아 단편화가 발생할 수 있습니다.

최악적합 (Worst Fit):
정의: 메모리에서 가장 큰 빈 블록을 찾아 할당합니다.
장점: 큰 빈 블록을 남겨두어 큰 메모리 요청을 처리할 수 있습니다.
단점: 메모리 사용 효율이 낮아질 수 있습니다.


mst 초기화
시작정점 선택 mst에 추가
정점에 연결된 모든 간선을 pq에 추가
